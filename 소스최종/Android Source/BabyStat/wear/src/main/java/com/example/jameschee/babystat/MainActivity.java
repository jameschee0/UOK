package com.example.jameschee.babystat;

import android.app.Activity;
import android.content.Context;
import android.content.IntentSender;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.wearable.view.WatchViewStub;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.wearable.MessageApi;
import com.google.android.gms.wearable.MessageEvent;
import com.google.android.gms.wearable.Node;
import com.google.android.gms.wearable.NodeApi;
import com.google.android.gms.wearable.Wearable;

import java.util.Collection;
import java.util.HashSet;

public class MainActivity extends Activity implements
        MessageApi.MessageListener,
        GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener,
        SensorEventListener {
    private TextView welcomeText;
    private TextView averageText;
    private TextView mostText;
    private TextView zText;
    private GoogleApiClient mGoogleApiClient;
    private SensorManager mSensorManager;
    private Sensor lin_accel;

    private static final String TAG = "MyActivity";
    private static final String SEND_DATA = "/send-data";
    private long mLastUpdate;
    private static final int UPDATE_THRESHOLD = 100;
    private static final int FINISHTIME = 2000;
    private boolean isfinish = false;
    private long currentfinishtime;

    private float highest = 0;
    private float av_final_data = 0;
    private float sendingData = 0;
    private int i=1;
    private int whichalgo = 0;

    public float[] receivedData;
    public double[] standtheta;
    public double[] falltheta;
    public double[] runtheta;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        final WatchViewStub stub = (WatchViewStub) findViewById(R.id.watch_view_stub);
        stub.setOnLayoutInflatedListener(new WatchViewStub.OnLayoutInflatedListener() {
            @Override
            public void onLayoutInflated(WatchViewStub stub) {
                welcomeText = (TextView)stub.findViewById(R.id.status_text);
                averageText = (TextView) stub.findViewById(R.id.av_text);
                mostText = (TextView)stub.findViewById(R.id.md_text);
                zText = (TextView)stub.findViewById(R.id.z_text);
            }
        });
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(Wearable.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();
        mGoogleApiClient.connect();
        gettheta();
        getSensor();
    }

    private void gettheta(){
        receivedData = new float[301];
        receivedData[0] = 1;

        standtheta = new double[]{3.707266950491813, 0.824535751847209, 0.5912476043547671, -0.5412567404437518, 0.3237381446837724, -0.5042639469313382, 1.179854668063544, -0.0948344857243118, -0.0540553472224019, 0.2870384189109427, -0.3264691190973492, -0.25947232286105, 0.134327219132109, -0.1081307484593501, -0.5826727145667692, -0.5236923272913315, -0.01419763075578497, -0.6359825072998136, -0.1893797444424007, -0.1759794740135197, -1.071483191495674, -0.2015875025317998, -0.1280612623440888, -0.6007306563500276, -0.2861383519709086, -0.2022910914071631, -0.1361628608601385, -0.06725312366656307, 0.3877094586156287, -0.4573575465282303, 0.3366697676581758, 0.2058822310100397, 0.1200775264302634, -0.05852305481228528, -0.253719279515771, 0.3984130612018509, 0.04902400670915823, -0.6653527005954409, -0.03876443480103198, 0.2025499690104153, -0.375149878973549, 0.1568662029104204, 0.4373473597032403, 0.1336911986353941, 0.4160121443425579, 0.5453164131135855, -0.07454811428290896, -0.1806040419743906, 0.3028485692115329, -0.05064590044465654, 0.1661018986451231, 0.505742432949728, -0.1742756430777345, 0.475639593855833, -0.00311194955611556, 0.7644692900456571, 0.4373543833215598, 0.1112847603309763, 0.5674068518660931, 0.6434996983228417, 0.1828661502472329, -0.2696260123819266, 0.4255740535075111, -0.05174991475960094, 0.09090685018080516, 0.4935696741265332, 0.4886495268925043, -0.2268353962096929, 0.5550442424511113, -0.391836285725289, -0.2549774091047966, 0.2083883633276786, -0.5857703824667009, -0.3401761849754338, 0.214619751919649, -0.5548290672302286, 0.07854228484522797, 0.1531112692061931, -0.2888111943975184, 1.030012128056231, -0.2397281117147946, -0.5923170428451371, 0.4201735897929899, -0.03889064101171132, -0.2430320860304331, 0.08136165106478382, 0.1061526465242937, -0.5127870526291444, -0.13251521524112, 0.02191344902023679, -0.1597291618360625, 0.1026470397240312, -0.001580394367808178, 0.05299688317801271, 0.1101385316542692, -0.3376340389257836, 0.3775209943153152, 0.9143827714810887, -0.3475453497906707, -0.03551378776971689, -0.3453070631117178, -0.1018901055025715, -0.4016914632834347, 0.04338015428417137, -0.1412077480786846, -0.7706936904241529, 0.0066368317392985, 0.0847173897181808, -0.7387583505540538, -0.4708820932158211, 0.1064906004268569, -0.2876373377306927, 0.3497936159779472, 0.5913478491829605, -0.1122516991778306, -0.1361166786959469, 0.1140343890689518, -0.09355739429692672, 0.1983278652621214, 0.5922572754901793, 0.2884103250817267, 0.2437292786044915, 0.23647273394325, 0.07311742632514856, 0.6420133162039942, 0.2302662247722697, -0.2580845922833109, 0.4253903281509858, -0.05336544608944734, -0.01059369363704236, 0.4264790134060813, -0.3843855455587644, 0.1275681465680127, 0.2834769365938702, -0.1356178823761164, 0.1721543303218107, -0.2609562300933992, -0.1630558544004749, -0.4185575694932275, 0.1648288788691697, 0.2864564579912624, 0.05097277065559502, 0.01147495036615752, 0.480556787508906, -0.07382225420736409, -0.0894905412345612, -0.02998002717474246, 0.2790965247140382, -0.1752238332809668, -0.03297969082350155, 0.2641248241035704, -0.142342279018723, 0.3033001501366521, -0.3438251365784312, -0.1693138036556797, 0.4820301646729732, -0.2933644460400089, 0.197190603522092, -0.4240131416534322, -0.3128587545075475, -0.03403838340271614, 0.202575413436673, 0.3398814009567545, 0.1410651933688631, 0.08770941392321367, -0.2654444456127809, 0.204970460438427, 0.5481318638716113, -0.3610590341151965, -0.1730321176984655, 0.01058031470538837, 0.04179901134540545, -0.03677021273312559, 0.3564550043856747, -0.2378434640845609, -0.07560290871355253, 0.4844367101651734, -0.586403809050549, -0.03193881364669266, 0.3063540150850776, -0.769275564051133, 0.2524839253520156, -0.01982877501370317, -0.3239596294277471, 0.3356342654710305, -0.08938267062343386, -0.0699854001183683, 0.1179539645151121, -0.4674803097196529, 0.06843318477420464, 0.02779997850646793, -0.1558762724321059, 0.2518260859547252, -0.01599051287528976, 0.148144828004843, 0.2053946547239153, 0.3078898610540309, 0.3545785492377893, -0.2634546616435334, 0.3419777260846739, 0.3176674079936441, -0.4669553355416978, 0.05433897923218316, 0.1587785358197186, -0.166271240351239, 0.04537771402285938, 0.2867776698402525, 0.4771465137306857, 0.189778435869955, 0.08626930946338289, 0.1243024071567669, 0.1771497865195277, 0.1041666653361522, -0.0740447334004654, 0.1010997637035398, 0.1550202811101009, -0.2938466680496565, 0.005622901164495204, 0.1179874801535718, -0.07283411041356294, -0.2739381451381976, 0.1349902048337174, -0.2074781047635334, -0.08808029933801585, 0.2321915775588407, -0.3404561279529419, -0.09612565224717233, 0.3047059989343158, -0.4544584744448261, -0.4502787700473331, 0.307560176431635, -0.2903138371944337, -0.09214516788764315, 0.2146675193469688, -0.2343277608410056, 0.26531384081478, 0.3928302665204457, 0.0633076546894762, 0.02084815493421937, 0.2732884026399804, -0.04350589082574634, 0.01796570102569715, 0.309845092836961, 0.05904847043334663, -0.0761534878527025, 0.4557545927161553, 0.1898248262055804, 0.09356941663043224, 0.475986268602915, 0.06820538961795551, 0.03782076676080045, 0.008530511418755901, 0.1695214846966714, -0.3914933015216462, -0.4512115493391354, 0.02951953389933781, 0.07246351797568783, -0.2819908973721648, -0.1149974574782056, 0.1855707403359308, 0.2793533657851934, 0.3699775643462487, -0.1073043206600268, 0.2825312754959489, 0.4516183387892382, -0.2028793077976785, -0.03343087044215139, -0.5402654274032082, 0.005131234070625572, 0.1822473239156673, -0.0946625679687873, -0.0820806842915603, -0.3506447664843891, 0.2843673052862661, 0.227658099327436, 0.2072547915126536, -0.2824394930328088, 0.355906761344104, 0.211444941280705, -0.261047308368782, 0.5439345233512403, -0.2473639640075989, 0.009993885397962473, -0.002140301165952548, 0.1588977255724465, -0.2771007553926414, 0.2359375491590995, 0.5314114055945788, -0.22316169762118, -0.5146882096272971, 0.3213896977219933, -0.2528138551275991, -0.06476584040488988, -0.06825900833493374, -0.3845837693822754, -0.293710872291981, 0.2586258364204864, -0.3788738210226823, 0.1432851935290155, 0.1815131342432472, -0.2955577518859644};
        falltheta = new double[]{-1.120863001086838,-0.2822925949690767,-0.2558021476363431,0.364533516682604,-0.1146460240777764,0.1493784292475763,-0.5996517423692843,0.02442254063272511,0.05335152465031779,-0.3004822970620435,0.09909450612238466,0.04898128107298937,-0.09038947322472018,0.1188133267873824,0.2416169434790923,0.1816206168780227,0.05696624077214854,0.2428696102049755,0.002254014946764774,0.0986000749821957,0.508488305862156,0.014959433911884,0.01566744033772849,0.2872258281938589,0.1296742269666258,0.07976011263946951,-0.01167367523547205,0.1186917762196435,-0.08764162308872593,0.08569487187233063,-0.04849622554687864,-0.05514689566674286,-0.1129551721044553,0.0008113656097573855,0.02893804746243716,-0.1298064371631121,-0.0163215334590198,0.2832265588315718,0.004398403252345915,-0.06154723367785334,0.2127636645137396,-0.04718508282707694,-0.1838782626716982,-0.08538218550943519,-0.1447620100037167,-0.1986573877479803,0.1080539076086204,0.06545302766474589,-0.2194774154212233,-0.06186315510030215,-0.2226047305822316,-0.2645997039226053,0.09633600412217419,-0.1863113427620059,-0.03431471744564012,-0.4414821725420542,-0.2914372367449671,-0.06637607316080713,-0.2552438826468555,-0.2069642960793753,-0.05301693384307978,0.1592794198071146,-0.27539380273825,0.08049208603842796,0.02029131626575805,-0.2727164988537426,-0.1942890868588677,0.156634250069314,-0.3560781538224706,0.2570708479541334,0.08242254815307287,-0.04692717391932988,0.2982261027347329,0.2249936296413152,-0.08057590848097537,0.2779875588325181,0.006785797173672898,-0.02867709592191583,0.0465314322576464,-0.5664548706507436,0.1530217566912567,0.3133273848830395,-0.1363984029203712,0.00503426845379661,0.106222102720675,0.0333814686893092,-0.09007205019061396,0.2252931978414127,0.06494114113661656,0.05892139914790784,0.08151325140427376,0.04615820761988196,0.2071852062360478,0.02680082236282154,0.04344800126076766,0.173513874022271,-0.08743979510109123,-0.3551586594694312,0.189667661167832,0.05532987305134532,0.3346943012137899,0.1381608427663862,0.2940015045122548,0.0546936783970854,0.08217743739969001,0.3058099521297166,0.05666374610743975,0.00885852121849248,0.3201111014944501,0.2022840296026284,-0.09647622157632262,0.06393328103736602,-0.1810851653810536,-0.1498316799346034,0.1161148497092531,0.1414736966885134,0.06893098865463106,0.1407432739298969,-0.04430836348344797,-0.2618467536963111,-0.103334211551094,-0.08747519199357169,-0.1160725321539584,-0.0131648551467456,-0.3216440726709712,0.02542514452503446,0.02113177187242631,-0.1603345387577472,0.03885224745079388,-0.009572261100943131,-0.05690935723430098,0.1441161510675782,-0.004345898664996383,-0.09719353660747021,0.1759908967719957,-0.05641977355265623,0.2550957917949547,0.07679222727354132,0.1047113690593057,0.03772908079542267,-0.1496420778162078,-0.008757580973335285,0.1348395685626585,-0.1609985003856925,0.04133054646658261,0.08679362122514017,0.07226724969696775,-0.06037376493415734,0.01512337041374152,-0.1413626574970046,-0.06165662802229063,0.1630175207649662,-0.1101984513873379,0.1588972073091853,0.1664681978281493,-0.1090608555350859,0.1645942143993669,-0.02824809438752886,0.1191675931298504,0.1334007236296508,0.1396786326186433,-0.02160497472497279,-0.1798272326502874,-0.002784017363272486,0.1012324287896714,0.1373512083636984,0.01085025334091099,-0.1677120522841088,0.1036303942015516,0.1484511235896112,-0.07035463908545382,0.04328379730617839,0.1057408696759562,-0.1260678441360245,0.163989058407897,0.06606439302920081,-0.04997254423452365,0.2834372020667121,-0.01211269806793048,-0.08965935400975954,0.2703424281850674,-0.003388399138351937,0.06989052711454452,0.1856791488118563,-0.07662404044824753,0.1977900215772661,0.1137800516708639,0.02328346733528851,0.2238005817806892,0.04429712337167056,0.006281302445287169,0.1321751116306326,-0.07709390187089875,0.06821239560236461,0.09466892579968113,-0.03794438955947217,-0.1353181286294718,-0.04492825198489717,0.2076113864133413,-0.0996607214648699,-0.1147475144483219,0.2697141924040647,0.1063190470482241,0.05993020534916069,0.2054104576399579,0.06778372477324493,-0.06518949795942507,-0.1909557206246376,-0.09041039022339084,0.02945091334667733,-0.05355846522171239,-0.06445846752820544,0.1160469514647826,-0.01116000559239659,-0.002856131580297155,-0.0271619129358697,0.1631351474490617,0.1250316232932668,0.03194281565157019,0.01103517441002158,0.2233853315923452,0.01031096887499599,0.07179214990548549,0.1402322430869559,0.01121312254079394,0.209100940120555,0.1281685839745778,-0.05076173889552579,0.2615347767780947,0.1987020279504952,0.001113161368209994,0.1984757391599123,0.1709677491058365,-0.003456955635868878,0.1064195389301622,0.001497737785842131,-0.03484374099699412,-0.01029970342010016,0.05582652762256352,-0.1191276411698705,0.08103560458224481,0.08485212117979106,-0.05261034732927227,0.07810992304305477,0.0784777505059053,-0.07823639563281226,0.01344119069261523,0.07648470810987232,-0.1585274132042202,0.07901407999096448,0.05924785072650944,0.03474487109252537,-0.02142449441558872,0.2253523465613722,0.1781998394435142,0.003620411429915824,0.05128695265932757,0.1021985354095685,0.01033493863015929,-0.09417630789722412,-0.1137140733797347,-0.1326506979455744,0.06598498698908095,-0.02852172480730096,-0.1152376278747239,0.1386332457727948,0.07598241314931112,0.2412101684635339,0.1213280816963029,-0.0086913782582179,0.1169176098325974,0.08112437444545254,0.2099198343827613,-0.1479145547918389,-0.1275411061471253,-0.0969733426551523,0.0342203504297614,-0.1426924091227555,0.01175980195184555,0.1206593924134613,-0.08006504879945668,0.1797560393539407,0.0531979068440284,0.1051597087504071,-0.06510118434637285,0.1777666460688998,-0.04866970806728679,-0.03996044122610927,0.09334493691363871,0.2499465215490479,-0.01782969685749009,0.1467108256559647,0.06805885841267226,0.02491168552713775,0.2207728460994743,0.2367773890324613,-0.0756909929830432,0.234066400983263,0.123527920548199,-0.07361448754363199,0.1377487432883073};
        runtheta = new double[]{-0.4190540605931677,-0.1595423657903954,-0.04019115789931871,0.2453361902278739,-0.08631865197663677,-0.02836647238423846,-0.2571117144020507,0.002164822043662432,-0.04712233514975905,-0.07035561795533689,0.06643566708268082,-0.0004578438808185161,-0.05219327321425828,0.02558126385961019,0.01375359110446155,-0.06100565889185085,0.03772929525137877,0.05307916881668862,-0.01324515084540137,0.05101079014102526,0.06543080145007169,0.01898166914375354,0.04357537754043099,0.08700122392499657,0.004920509433384505,0.006103613578455786,0.08969535432434805,-0.02380634805239489,-0.06927861488698475,0.08983362481137414,-0.08238375581295193,-0.02294843295844905,0.05346730062272585,-0.04129632237883598,0.01041135281423877,-0.01463633365920217,-0.06894942625376037,-0.03282510457512355,-0.02439012812553994,-0.06262651852129573,-0.04110383811252568,-0.0120839699327713,-0.03936203338335761,-0.02406721815136909,-0.009895638509012887,-0.01652889714872304,-0.0400532954845581,0.03708483855064389,0.06252346351579849,0.02996874303563359,0.1226051815232648,0.0474042897773338,-0.02909772809596154,-0.03640725897117249,0.07142976256224723,0.09465043665894669,0.008754161574403266,0.02778995450020792,-0.03993184030884615,0.02783048165339255,-0.03616689742560624,-0.03280867608427399,0.04835359291484975,-0.0003552929917842474,0.07738621833202911,0.06693385361192318,0.0538330178104786,0.02968036786225494,0.01197112002329048,-0.03877881706295729,0.04541774351486769,-0.04547109119507713,-0.04282774330768014,0.001913844631049792,-0.03258751601512019,0.01392429918456327,0.03138273610872978,-0.08156807681066972,0.06934850844365567,0.03932426272273998,-0.06783718756545494,0.07499215737179794,0.03237472910139025,-0.006324658687021968,0.002883797332953454,0.002740127493828833,-0.02904650177071636,0.04988007548782078,0.02448471878219077,-0.06842311445507958,0.01208510263490925,-0.05723252761185542,-0.09792958878823188,0.03445397903294563,-0.09582220218982024,0.02567059925053327,-0.06574759247328138,0.1055234169648245,0.0962105204899904,-0.03527300945491625,-0.01897025091378718,0.02080018439080281,0.01453546190795364,-0.02314542218155057,0.05230126968366768,0.06283798805796909,-0.02468905294337553,0.05020466098776117,0.09976886269318906,0.02246857713081087,0.03442029045501334,0.1039023428948966,0.01826922829579512,-0.06653239194746971,0.003209003160692895,-0.03532249519250231,-0.1290164314746701,0.008706905581062805,-0.02480337118868204,-0.1002879714211051,0.03338844151472404,0.01195768363577373,0.005027436916672266,0.006226225349976146,0.05029084063043063,-0.08354249883952895,0.1039951113307767,0.0479566438182567,-0.00449074769176963,0.004487340451241204,-0.007125904081485295,0.02214265955578609,-0.01332287391303804,0.06093514274555507,-0.001955794389060637,0.04813114481704798,0.01748931212585618,0.0229939118478249,0.03112076818856067,-0.01970082548689813,-0.05064569930659186,-0.03495779616371696,-0.02784163319329285,-0.06863811208289911,-0.02848193634628188,-0.0191969844864614,-0.02188346261348671,-0.04272014936364987,0.01130861362086338,-0.03308504714338292,-0.009421119958102313,-0.08438149027795595,-0.09700228805708311,0.02140733683587433,-0.01812060366602912,-0.01978990613677321,0.03720355862571187,-0.1285683313667811,0.07565049833996566,0.09248063153366883,-0.02998076300272861,0.008439954789209156,0.0292941605410122,0.001936285478644683,-0.05648015565102616,-0.02880279309143604,-0.04674189192536378,-0.04525403458179,0.08542254683728985,-0.05513049310390333,-0.0295004001120025,0.05015771996990531,-0.04640579684665545,-0.06035884251904773,0.000881460969534261,0.03762993519051368,-0.08167015214978128,0.03195619184649138,0.05068124563657983,-0.07093061748166127,0.0828083449237477,-0.03891531042720092,0.008451333831859056,0.04700842068451219,-0.04082310033806284,0.04211514506775454,-0.008638950964319969,0.006924807102512255,0.01126936112721227,-0.0272554445532089,-0.02837635824793474,-0.0487117498675766,-0.02339045424965837,-0.07833348448871968,-0.08834170548564395,0.03964084421282672,0.06303929280314698,-0.09580836680081624,-0.03046055182263559,0.04681484298773379,-0.01264192474155552,-0.02721504064035761,0.02013168000014349,-0.03000442089948545,-9.577616149558905e-05,0.01015598351126617,-0.003050845217163594,-0.0228676435038242,0.005071631743369471,-0.06911876115578684,0.04541395381664389,-0.0210185200543726,-0.1193135285834463,0.04024590678976128,-0.06524686701521798,-0.01169395819338849,-0.0151370838218947,-0.04162069651978714,-0.013915582722262,0.03082345149762964,-0.02687054928159142,0.04649563426054205,0.009181927027297063,0.01172908304016735,-0.02401084201108233,0.02588537470072541,-0.04537768678125852,-0.08178750461801089,0.03220377801076268,0.06769327615481935,-0.08095556396849171,0.04505617778610541,0.009910721227530051,-0.02462127212712693,0.03531745834826415,-0.05535909601877778,-0.0697380250345865,-0.03163701565070717,0.005290390141088223,0.03179504125726265,-0.03559831082120325,-0.02301418884860884,-0.003007176917897758,-0.03084650394167496,0.008755090030361118,-0.00981294609712037,-0.07484812039402639,-0.05049591921272437,-0.002984633722740755,-0.06392812802160787,0.01433035694004829,-0.0003936060478384335,-0.01559851591498699,0.03909542185345578,0.02200411852723414,-0.03659939456090465,0.01189861784663484,0.03188800240800055,0.0177840504638224,-0.002919793161482667,-0.03009987269445012,-0.02607069675447143,0.02869707043352274,-0.0525329109679946,-0.0163010670578505,0.003233532465711938,0.04420464316473045,0.07008473017394551,-0.008936728089830561,-0.1219556227487383,0.004512953156042685,0.01604614459048074,0.04099044217369047,-0.007422981917707677,-0.00790136426612871,0.02315428295242596,0.03014491081084801,-0.007054947943091133,-0.01509209744605261,0.08096499148063398,-0.08672414274938452,0.01194368601822082,0.05423388238828437,0.01107146010002746,0.03309735332059716,0.03311416165887102,-0.08503706197543508,-0.04727692250650854,0.03750546429087376,0.008443381604448541,-0.06553075577557017,-0.01006017284267898,0.03046646672337514,0.02424243926628947,0.03747704672582795,0.01472362073343027,-0.08630829466505278,0.04516995466117658,-0.01101540647986423,-0.07030464177939233,0.01328176335379577};
    }

    private void getSensor(){

        mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
        if(null == (lin_accel = mSensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION))){
            finish();
        }
    }

    @Override
    public void onResume(){
        super.onResume();
        mSensorManager.registerListener(this, lin_accel,SensorManager.SENSOR_DELAY_NORMAL);
        mLastUpdate = System.currentTimeMillis();
    }

    @Override
    public void onPause(){
        super.onPause();

        mSensorManager.unregisterListener(this);
    }

    @Override
    public void onConnected(@Nullable Bundle bundle) {
        Wearable.MessageApi.addListener(mGoogleApiClient, this);
    }

    @Override
    public void onConnectionSuspended(int i) {
        LOGD(TAG, "Connection to Google API client was suspended");
    }


    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
        if(connectionResult.hasResolution()){
            try {
                connectionResult.startResolutionForResult(this, 1000);
            } catch (IntentSender.SendIntentException e) {
                mGoogleApiClient.connect();
            }
        }else{
            Log.e(TAG, "Connection to Google API client has failed");
            Wearable.MessageApi.removeListener(mGoogleApiClient, this);
        }
    }


    @Override
    public void onMessageReceived(MessageEvent messageEvent) {
        LOGD(TAG, "onMessageReceived() A message from watch was received:");
    }


    public void button_sendMessage(){
        new SendPhoneTask().execute();
    }


    private void sendDataMessage(String node) {
        String a1 = "0"+sendingData;
        Wearable.MessageApi.sendMessage(
                mGoogleApiClient, node, SEND_DATA, a1.getBytes()).setResultCallback(
                new ResultCallback<MessageApi.SendMessageResult>() {
                    @Override
                    public void onResult(MessageApi.SendMessageResult sendMessageResult) {
                        if (!sendMessageResult.getStatus().isSuccess()) {
                            Log.e(TAG, "Failed to send message with status code: "
                                    + sendMessageResult.getStatus().getStatusCode());
                            Context context = getApplicationContext();
                            Toast succeed = Toast.makeText(context,"crashed",Toast.LENGTH_SHORT);
                            succeed.show();
                        }
                    }
                }
        );
        finish();
    }


    private static void LOGD(final String tag, String message) {
        if (Log.isLoggable(tag, Log.DEBUG)) {
            Log.d(tag, message);
        }
    }

    private Collection<String> getNodes() {
        HashSet<String> results = new HashSet<>();
        NodeApi.GetConnectedNodesResult nodes =
                Wearable.NodeApi.getConnectedNodes(mGoogleApiClient).await();

        for (Node node : nodes.getNodes()) {
            results.add(node.getId());
        }

        return results;
    }

    @Override
    public void onSensorChanged(SensorEvent sensorEvent) {
        if(sensorEvent.sensor.getType() == Sensor.TYPE_LINEAR_ACCELERATION){
            long actualTime = System.currentTimeMillis();
            if(actualTime - mLastUpdate>UPDATE_THRESHOLD){
                mLastUpdate = actualTime;
                float x = sensorEvent.values[0];
                float y = sensorEvent.values[1];
                float z = sensorEvent.values[2];

                //처음에 시도한 알고리즘 도입부
               /*
                    float times = (float) Math.sqrt(x*x+y*y+z*z);
                    if(times >= highest){
                        highest = times;
                    }

                    if(i<101){
                        av_final_data = av_final_data+times;
                        i++;
                    }

                    averageText.setText(String.valueOf(av_final_data/100));
                    mostText.setText(String.valueOf(highest));

                    if(i==101){
                        status(av_final_data/100,highest);
                        i=i+1;
                    }*/

                //새로 만든 알고리즘의 도입부
                    if(i<301){
                        receivedData[i] = x;
                        averageText.setText(String.valueOf(receivedData[i]));
                        i= i+1;
                        receivedData[i]=y;
                        mostText.setText(String.valueOf(receivedData[i]));
                        i= i+1;
                        receivedData[i]=z;
                        zText.setText(String.valueOf(receivedData[i]));
                        i= i+1;
                    }else if(i == 301){
                        newalgo();
                    //}
                }

            }
        }
    }

    //새로만든 알고리즘의 핵심 데이터 처리 부분
   private void newalgo(){
        int j = 0;
        float standadd = 0;
        float falladd = 0;
        float runadd = 0;

        float standsig = 0;
        float fallsig = 0;
        float runsig = 0;

        while(j<301){
            standadd = (float)(standadd + receivedData[j]*standtheta[j]);
            falladd = (float)(falladd + receivedData[j]*falltheta[j]);
            runadd = (float) (runadd + receivedData[j]*runtheta[j]);
            j = j+1;
        }
        standsig = (float) signoid(standadd);
        fallsig = (float) signoid(falladd);
        runsig = (float) signoid(runadd);


        Log.d("Sigmoid_stand,fall,run:", ""+standsig+" "+fallsig+" "+runsig);
        if(standsig>fallsig&&standsig>runsig){
            sendingData = 1;
            welcomeText.setText("아이가 서있습니다");
        }else if(fallsig>standsig&&fallsig>runsig){
            sendingData = 4;
            welcomeText.setText("아이가 넘어졌습니다");
        }else if(runsig>standsig&&runsig>fallsig){
            sendingData = 6;
            welcomeText.setText("아이가 달리고 있습니다");
        }else{
            sendingData = 0;
            welcomeText.setText("에러발생/코드:5554");
        }
        button_sendMessage();
        currentfinishtime = System.currentTimeMillis();
        isfinish = true;
        finish();
    }

    //새로운 알고리즘의 시그노이드 값을 반환한다다
   private double signoid(float runadd) {
        double result = 1/(1 + Math.exp(-runadd));
        return result;
    }


    //처음에 시도 했었던 알고리
    /*public void status(float av,float hi){
        float outa = grapha(av);
        float outb = graphb(av);
        float outc = graphc(av);
        if(outa>=hi){
            if(av<6){
                sendingData=1;
                welcomeText.setText("Standing");
            }else if(av>=6&&av<20){
                sendingData=2;
                welcomeText.setText("Walking");
            }else{
                sendingData=3;
                welcomeText.setText("Extra Activity");
            }
        }else if(outa<hi&&outc<hi){
            sendingData = 4;
            welcomeText.setText("Fell..Ouch");
        }else if(outa<hi&&outb<hi&&outc>hi){
            sendingData = 5;
            welcomeText.setText("Light Jogging");
        }else if(outa<hi&&outb>hi){
            sendingData = 6;
            welcomeText.setText("Jogging and Running");
        }else{
            sendingData = 0;
            welcomeText.setText("Error_Occurred");
        }
        button_sendMessage();
        currentfinishtime = System.currentTimeMillis();
        isfinish = true;
    }

    public float grapha(float av){
        float result = 0;
        result = (float)(1.15075342*av+13.8168493);
        return result;
    }
    public float graphb(float av){
        float result = 0;
        result = (float)(5.52137714*av-17.1335959);k
        return result;
    }
    public float graphc(float av){
        float result = 0;
        result = (float)(3.50243996*av+9.90407749);
        return result;
    }*/

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
    }

    public class SendPhoneTask extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... args) {
            Collection<String> nodes = getNodes();
            for (String node : nodes) {
                sendDataMessage(node);
            }
            return null;
        }
    }
}
